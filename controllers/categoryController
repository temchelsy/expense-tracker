

import { pool } from "../libs/database.js";

/**
 * Get all categories (Global)
 */
export const getCategories = async (req, res) => {
  try {
    const categories = await pool.query({
      text: `SELECT * FROM tblcategory ORDER BY category_name ASC`,
    });

    res.status(200).json({
      status: "success",
      data: categories.rows,
    });
  } catch (error) {
    console.error("Error fetching categories:", error);
    res.status(500).json({ status: "failed", message: error.message });
  }
};

/**
 * Create a new category (Admin Only)
 * Optional: If you want only admins to create categories
 */
export const createCategory = async (req, res) => {
  try {
    const { category_name } = req.body;

    // Validate input
    if (!category_name || category_name.trim() === "") {
      return res.status(400).json({ status: "failed", message: "Category name is required." });
    }

    // Check if the category already exists
    const categoryExistQuery = {
      text: `SELECT * FROM tblcategory WHERE LOWER(category_name) = LOWER($1)`,
      values: [category_name.trim()],
    };

    const categoryExistResult = await pool.query(categoryExistQuery);
    const categoryExist = categoryExistResult.rows[0];

    if (categoryExist) {
      return res.status(409).json({ status: "failed", message: "Category already exists." });
    }

    // Insert the new category
    const createCategoryResult = await pool.query({
      text: `INSERT INTO tblcategory (category_name) VALUES ($1) RETURNING *`,
      values: [category_name.trim()],
    });

    const newCategory = createCategoryResult.rows[0];

    res.status(201).json({
      status: "success",
      message: "Category created successfully.",
      data: newCategory,
    });
  } catch (error) {
    console.error("Error creating category:", error);
    res.status(500).json({ status: "failed", message: error.message });
  }
};

/**
 * Update an existing category (Admin Only)
 * Optional: If you want only admins to update categories
 */
export const updateCategory = async (req, res) => {
  try {
    const { id } = req.params;
    const { category_name } = req.body;

    // Validate input
    if (!category_name || category_name.trim() === "") {
      return res.status(400).json({ status: "failed", message: "Category name is required." });
    }

    // Check if the category exists
    const categoryExistQuery = {
      text: `SELECT * FROM tblcategory WHERE id = $1`,
      values: [id],
    };

    const categoryExistResult = await pool.query(categoryExistQuery);
    const categoryExist = categoryExistResult.rows[0];

    if (!categoryExist) {
      return res.status(404).json({ status: "failed", message: "Category not found." });
    }

    // Update the category
    const updateCategoryResult = await pool.query({
      text: `UPDATE tblcategory SET category_name = $1, updatedAt = CURRENT_TIMESTAMP WHERE id = $2 RETURNING *`,
      values: [category_name.trim(), id],
    });

    const updatedCategory = updateCategoryResult.rows[0];

    res.status(200).json({
      status: "success",
      message: "Category updated successfully.",
      data: updatedCategory,
    });
  } catch (error) {
    console.error("Error updating category:", error);
    res.status(500).json({ status: "failed", message: error.message });
  }
};

/**
 * Delete a category (Admin Only)
 * Optional: If you want only admins to delete categories
 */
export const deleteCategory = async (req, res) => {
  try {
    const { id } = req.params;

    // Check if the category exists
    const categoryExistQuery = {
      text: `SELECT * FROM tblcategory WHERE id = $1`,
      values: [id],
    };

    const categoryExistResult = await pool.query(categoryExistQuery);
    const categoryExist = categoryExistResult.rows[0];

    if (!categoryExist) {
      return res.status(404).json({ status: "failed", message: "Category not found." });
    }

    // Delete the category
    await pool.query({
      text: `DELETE FROM tblcategory WHERE id = $1`,
      values: [id],
    });

    res.status(200).json({
      status: "success",
      message: "Category deleted successfully.",
    });
  } catch (error) {
    console.error("Error deleting category:", error);
    res.status(500).json({ status: "failed", message: error.message });
  }
};
